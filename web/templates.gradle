def template = { fileName ->
    String templateDir = "src/main/resources/org/geogebra/web/resources/html/"
    return file(templateDir + fileName).text
}

def css = { directory, fileName ->
    String text
    def relPath = (directory ? directory + "/" : "") + fileName + ".css"
    def ggbVersion = getGeogebraVersion(".");
    if (project.hasProperty("downloadStyles")) {
        text = new URL("https://www.geogebra.org/apps/$ggbVersion/css/$relPath").withReader { reader ->
            reader.readLines().join("\n")
        }
    } else {
        String fileDir = "war/css/" + relPath
        text = file(fileDir).text;
    }
    return "<style id=\"ggbstyle_" + fileName + "\">" + text + "</style>\n";
}

String html = template("app-template.html")
String splash = template("classic-splash.html")

["algebra", "graphics", "spreadsheet", "cas", "probability", "3d", "exam"].each {
    def iconText = file("../common/src/nonfree/resources/org/geogebra/common/icons/svg/web/menuIconsTransparent/menu_view_" + it + ".svg").text
    splash = splash.replace("<!--ICON:" + it.toUpperCase() + "-->",
            "data:image/svg+xml;base64," + iconText.bytes.encodeBase64().toString())
}

String.metaClass.injectPartial = { partialId, skip ->
    delegate.replace("<!--${partialId.toUpperCase()}-->", skip ? "" : template("partials/${partialId}.html"))
}

def partials = { code, appPartials ->
    def partials = appPartials ?: ["share-button", "signin-button"]
    partials.each({
        code = code.injectPartial(it, false)
    })
    return code
}

def replaceVendor = { htmlContent, vendor ->
    return htmlContent.replace("<!--VENDOR-->", vendor)
            .replace("<!--VENDOR SCRIPTS-->", template("partials/vendor-scripts-${vendor.toLowerCase()}.html"))
            .replace("<!--PRECONNECT-->", vendor == "Mebis" || vendor == "Moodle" ? "" : template("partials/preconnect.html"))
}

def getCss = { ->
    return css("bundles", "simple-bundle") + css("", "keyboard-styles") + css("bundles", "bundle")
}

ext.english = { raw, appName ->
    return raw.replace("<!--SIGN IN-->", "Sign in")
            .replace("<!--APP NAME-->", appName)
            .replace("<!--CODEBASE-->", "")
            .replace("<!--LANG-->", "en")
}

ext.handlebars = { raw ->
    return raw.replace("<!--SIGN IN-->", "{{signIn}}")
            .replace("<!--APP NAME-->", "{{appName}}")
            .replace("<!--LANG-->", "{{lang}}")
            .replace("<!--CODEBASE-->", "{{codebase}}")
            .replace("<!--LANGUAGE LINKS-->", "{{{languageLinks}}}")
}

ext.classicHtml = { app, prerelease, offline = false, inlineCss = false ->
    def platformSpecific = offline ? "<!--PLATFORM SPECIFIC CODE--><script src=\"platform.js\"></script>" : "<!--LANGUAGE LINKS-->"
    def inlinedCss = inlineCss ? getCss() : ""
    return replaceVendor(html, "GeoGebra")
            .replace("<!--SPLASH-->", splash)
            .replace("<!--SPLASH STYLE-->", template("splash-style.css"))
            .replace("<!--PRELOADED CSS-->", inlinedCss)
            .replace("<!--ICON-->", "https://www.geogebra.org/apps/icons/geogebra.ico")
            .replace("<!--PLATFORM SPECIFIC CODE-->", "<script>prerelease=${prerelease};appOnline=${!offline};</script>" + platformSpecific)
            .injectMeasurementTemplate(app.firebaseAppId, app.measurementId, app.hotjar)
}

String.metaClass.injectMeasurementTemplate = { firebaseAppId, measurementId, hotjar ->
    return delegate.injectPartial("firebase", firebaseAppId == "" || measurementId == "")
                .replace("<!--FIREBASE APP ID-->", firebaseAppId)
                .replace("<!--MEASUREMENT ID-->", measurementId)
                 .injectPartial("hotjar", !hotjar)
}

ext.appHtml = { app, prerelease, offline = false, inlineCss = false ->
    def vendor = app.vendor ?: "GeoGebra"
    def appID = app.id.split("-")[0]
    def appTransKey = app.transKey
    def header = vendor == "Mebis" || vendor == "Moodle" ? "" : template("app-header-beta.html")
            .replace("<!--LOGO-LINK-->", offline ? "#" : "https://www.geogebra.org")
    header = header.replace("<!--PICKER-->", offline ? "" : template("partials/picker.html"))
    header = partials(header, app.partials)
    def inlinedCss = inlineCss ? getCss() : ""
    def platformSpecific = offline ? "<script src=\"platform.js\"></script>" : "<!--LANGUAGE LINKS-->"
    def startscreenStyle = "startscreen " + appID + (offline ? " offline" : "")
    def appStoreBanner = app.appStoreId ? "<meta name=\"apple-itunes-app\" " +
            "content=\"app-id=${app.appStoreId}\"><link rel=\"manifest\" href=\"https://www.geogebra.org/apps/manifest/${appID}.json\">" : ""
    def splashContent = template("${app.id}-splash.html")
    def firebaseAppId = app.firebaseAppId ?: ""
    def measurementId = app.measurementId ?: ""
    return replaceVendor(html, vendor)
            .replace("<!--SPLASH-->", header + "<div class=\"$startscreenStyle\">$splashContent</div>")
            .replace("<!--SPLASH STYLE-->", template("app-header.css").replace('$height', offline ? '0' : '64px')
                    .replace('$logo_cursor', offline ? 'default' : 'pointer'))
            .replace("<!--PRELOADED CSS-->", inlinedCss)
            .replace("<!--PLATFORM SPECIFIC CODE-->", "<script>prerelease=${prerelease};appID=\"${appID}\";appOnline=${!offline};</script>" + platformSpecific)
            .replace("<!--ICON-->", "https://www.geogebra.org/apps/icons/${appID}.ico")
            .replace("<!--APP ID-->", appID)
            .replace("<!--APP TRANSKEY-->", appTransKey)
            .replace("<!--APPSTORE BANNER-->", appStoreBanner)
            .injectMeasurementTemplate(firebaseAppId, measurementId, app.hotjar)
            .replace("\r\n", "\n") // generate the same on Win and Unix
}

ext.solverHtml = { ->
    def header = partials(template("app-header-beta.html"), null);
    template("solver-template.html")
            .replace("<!--HEADER-->", header)
            .replace("<!--SPLASH STYLE-->", template("app-header.css"))
}
